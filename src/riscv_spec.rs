use phf::phf_map;

pub static OPCODE_BITS: phf::Map<String, String> = phf_map! {
    "add" => "0110011",
    "sub" => "0110011",
    "sll" => "0110011",
    "slt" => "0110011",
    "sltu" => "0110011",
    "xor" => "0110011",
    "srl" => "0110011",
    "sra" => "0110011",
    "or" => "0110011",
    "and" => "0110011",
    "addi" => "0010011",
    "beq" => "1100011",
    "bne" => "1100011",
    "blt" => "1100011",
    "bge" => "1100011",
    "bltu" => "1100011",
    "bgeu" => "1100011",
    "sb" => "0100011",
    "lui" => "0110111",
    "li"   => "0010111",
    "jal" => "1101111",
    "jalr" => "1100111",
    "j" => "1101111",
    "lw" => "0000011",
    "lb" => "0000011",
    "lh" => "0000011",
    "lbu" => "0000011",
    "lhu" => "0000011",
    "sw" => "0100011",
    "sh" => "0100011",
};

pub static REGISTER_BITS: phf::Map<String, String> = phf_map! {
    "x0"=> "00000",
    "x1"=> "00001",
    "x2"=> "00010",
    "x3"=> "00011",
    "x4"=> "00100",
    "x5"=> "00101",
    "x6"=> "00110",
    "x7"=> "00111",
    "x8"=> "01000",
    "x9"=> "01001",
    "x10"=> "01010",
    "x11"=> "01011",
    "x12"=> "01100",
    "x13"=> "01101",
    "x14"=> "01110",
    "x15"=> "01111",
    "x16"=> "10000",
    "x17"=> "10001",
    "x18"=> "10010",
    "x19"=> "10011",
    "x20"=> "10100",
    "x21"=> "10101",
    "x22"=> "10110",
    "x23"=> "10111",
    "x24"=> "11000",
    "x25"=> "11001",
    "x26"=> "11010",
    "x27"=> "11011",
    "x28"=> "11100",
    "x29"=> "11101",
    "x30"=> "11110",
    "x31"=> "11111",
};

pub static FUNCT_3_BITS: phf::Map<String, String> = phf_map! {
    "add" => "000",
    "sub" => "000",
    "sll" => "001",
    "slt" => "010",
    "sltu" => "011",
    "xor" => "100",
    "srl" => "101",
    "sra" => "101",
    "or" => "110",
    "and" => "111",
    "addi" => "000",
    "beq" => "000",
    "bne" => "001",
    "blt" => "100",
    "bge" => "101",
    "bltu" => "110",
    "bgeu" => "111",
    "sb" => "000",
    "lw" => "010",
    "lb" => "000",
    "lh" => "001",
    "lbu" => "100",
    "lhu" => "101",
    "sw" => "010",
    "sh" => "001",
    "jalr" => "000",
};

pub static FUNCT_7_BITS: phf::Map<String, String> = phf_map! {
    "add" => "0000000",
    "sub" => "0100000",
    "sll" => "0000000",
    "slt" => "0000000",
    "sltu" => "0000000",
    "xor" => "0000000",
    "srl" => "0000000",
    "sra" => "0100000",
    "or" => "0000000",
    "and" => "0000000",
    "addi" => "0000000",
    "beq" => "0000000",
    "bne" => "0000000",
    "blt" => "0000000",
    "bge" => "0000000",
    "sb" => "0000000",
};

pub static R_TYPE_INSTRUCTIONS : [&str] = ["add","sub","sll","slt","sltu","xor","srl","sra","or","and"];
pub static I_TYPE_INSTRUCTIONS : [&str] = ["addi","slti","sltiu","xori","ori","andi","slli","srli","srai","lb","lh","lw","lbu","lhu","jalr"];
pub static S_TYPE_INSTRUCTIONS : [&str] = ["sb","sh","sw"];
pub static U_TYPE_INSTRUCTIONS : [&str] = ["lui","auipc"];
pub static B_TYPE_INSTRUCTIONS : [&str] = ["beq","bne","blt","bge","bltu","bgeu"];
pub static J_TYPE_INSTRUCTIONS : [&str] = ["jal"];
pub static BRACKET_INSTRUCTIONS :[&str]  = ["lb","lh","lw","lbu","lhu","sb","sh","sw","jalr"];
